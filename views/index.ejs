<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='stylesheets/bootstrap.min.css' />
    <link rel='stylesheet' href='stylesheets/lightbox.css' />
    <link rel='stylesheet' href='stylesheets/smk_modif.css' />
    <link rel='stylesheet' href='stylesheets/style.css' />

</head>
<body>

<div class="container">
    <div class="row row-content">
    
            <canvas width="250" height="250" id="canvas_orig" name="canvas_orig"></canvas>



            <canvas width="250" height="250" id="canvas_pix" name="canvas_pix"></canvas>




            <label for="canvas_col" id="canvas_col_label" name="canvas_col_label" class=" control-label" style="display:none">Chosen color</label>
            <canvas width="100" height="50" id="canvas_col" name="canvas_col"></canvas>


    </div>


    <div class="row row-content">

        <form class="form-horizontal" role="form" action="/testroute" method="post">
            <div class="form-group">
                <label for="colval" class="col-sm-1 control-label" style="display:none">Chosen color</label>
                <div class="col-xs-7 col-sm-3 col-md-3">
                    <input type="text" class="form-control" id="colval" name="colval" style="display:none">
                </div>
            </div>
            <div class="form-group">
                <label for="hex" class="col-sm-1 control-label">RGB-Hex</label>
                <div class="col-xs-7 col-sm-3 col-md-3">
                    <input type="text" class="form-control" id="hex" name="hex" placeholder="Enter hex value" onchange="reportCol(this.value)">
                </div>
            </div>
            <div class="form-group">
                <label for="rgb" class="col-sm-1 control-label">RGB</label>
                <div class="col-xs-5 col-sm-3 col-md-3 col-lg-3">
                    <input type="text" class="form-control" id="rgb" name="rgb" placeholder="Enter RGB value">
                </div>
            </div>
            <div class="form-group">
                <label for="hsl" class="col-sm-1 control-label">HCL</label>
                <div class="col-xs-5 col-sm-4 col-md-3 col-lg-3">
                    <input type="text" class="form-control" id="hsl" name="hsl" placeholder="Enter HSL value">
                </div>
            </div>
            <div class="form-group">
                <label for="hits" class="col-sm-1 control-label">Max</label>
                <div class="col-xs-5 col-sm-3 col-md-3 col-lg-3">
                    <input type="number" value="20" class="form-control" id="hits" name="hits" placeholder="Number of hits">
                </div>
            </div>
            <div class="form-group">
                <label for="hexcount" id="hexcountlabel" class="col-sm-1 control-label" style="display:none">Occurences</label>
                <div class="col-xs-5 col-sm-3 col-md-3 col-lg-3">
                    <input type="text" class="form-control" id="hexcount" name="hexcount" style="display:none">
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-5 col-sm-3 col-md-3 col-lg-3">
                    <button type="submit" class="btn btn-primary">Find artworks</button>
                </div>
            </div>
        </form>

    </div>
    <!--    <div id="res"></div>

        <div class="row row-content">
            <form class="form-inline" role="form" action="/upload" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <div class="col-xs-5 col-sm-5 col-md-5 col-lg-5">
                        <label class="checkbox">

                            &lt;!&ndash;<input type="checkbox" value="apple" name="fruit" checked="checked" id="back" onchange="myFunction()"><label for="apple">Apple</label><br>&ndash;&gt;
                            <input type="checkbox" id="keywords" value="__option__" onclick="">back to orignal
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <input type="file" name="image">
                    <button type="submit" id="mysubmit" class="btn btn-primary">Upload</button>
                </div>
            </form>
        </div>-->
</div>

<script type="text/javascript" src="javascripts/jquery-min.js"></script>
<script type="text/javascript" src="javascripts/bootstrap.min.js"></script>
<script type="text/javascript" src="javascripts/lightbox.js"></script>
<script type="text/javascript">


    var canvas = document.getElementById('canvas_orig').getContext('2d');
    var canvas2 = document.getElementById('canvas_pix').getContext('2d');
    var canvas3 = document.getElementById('canvas_col').getContext('2d');


    // create an image object and get itâ€™s source
    var img = new Image();
    var imgpix = new Image();
    imgpix.src = '/uploads/colormappix.png';
    img.src = '/uploads/colormap.jpg'

    // copy the image to the canvas
    $(img).load(function(){
        canvas.drawImage(img,20,20);
    });
    $(imgpix).load(function(){
        canvas2.drawImage(imgpix,20,20);
    });


    $('#canvas_pix').click(function(event){
        //var canvas2 = document.getElementById('canvas_pix').getContext('2d');
        // getting user coordinates
        var x = event.pageX - this.offsetLeft;
        var y = event.pageY - this.offsetTop;
        console.log("X " + x);
        console.log("y " + y);
        // getting image data and RGB values
        var img_data = canvas2.getImageData(x, y, 1, 1).data;
        var R = img_data[0];
        var G = img_data[1];
        var B = img_data[2];
        var rgb = R + ',' + G + ',' + B;
        console.log("C " + img_data);
        // convert RGB to HEX
        var hex = rgbToHex(R,G,B);
        var hsl = rgbToHsl(R, G, B);
        // making the color the value of the input'
        // making the color the value of the input'
        /*
         for (var i=0;i<12;i++) {
         for (var j = 0; j < 6; j++) {
         canvas3.fillStyle = 'rgb(' + Math.floor(R - 22.5 * i) + ',' + Math.floor(G - 22.5 * j) + ',' + B + ')';
         canvas3.fillRect(j * 25, i * 25, 25, 25);
         }
         for (var j = 6; j < 12; j++) {
         canvas3.fillStyle = 'rgb(' + Math.floor(R + 22.5 * i) + ',' + Math.floor(G + 22.5 * j) + ',' + B + ')';
         canvas3.fillRect(j * 25, i * 25, 25, 25);
         }
         }
         */

        var fillVal = "#" + hex;

        canvas3.fillStyle=fillVal;
        canvas3.fillRect(20,20,150,100);

        $('#hsl').val(hsl);
        $('#rgb').val(rgb);
        $('#hex').val('#' + hex);
        $("#hex").change();
        $("#canvas_col_label").show();

    });

    $('#canvas_orig').click(function(event){
        // getting user coordinates
        var x = event.pageX - this.offsetLeft;
        var y = event.pageY - this.offsetTop;
        // getting image data and RGB values
        var img_data = canvas.getImageData(x, y, 1, 1).data;
        var R = img_data[0];
        var G = img_data[1];
        var B = img_data[2];
        var rgb = R + ',' + G + ',' + B;
        console.log("c " + rgb + " " + x + " " + y);
        // convert RGB to HEX
        var hex = rgbToHex(R,G,B);
        var hsl = rgbToHsl(R, G, B);
        // making the color the value of the input'
        /*
         for (var i=0;i<12;i++) {
         for (var j = 0; j < 6; j++) {
         canvas3.fillStyle = 'rgb(' + Math.floor(R - 22.5 * i) + ',' +
         Math.floor(G - 22.5 * j) + ',' + B + ')';
         canvas3.fillRect(j * 25, i * 25, 25, 25);
         }
         for (var j = 6; j < 12; j++) {
         canvas3.fillStyle = 'rgb(' + Math.floor(R + 22.5 * i) + ',' + Math.floor(G + 22.5 * j) + ',' + B + ')';
         canvas3.fillRect(j * 25, i * 25, 25, 25);
         }
         }
         */

        var fillVal = "#" + hex;

        canvas3.fillStyle=fillVal;
        canvas3.fillRect(20,20,150,100);

        $('#hsl').val(hsl);
        $('#rgb').val(rgb);
        $('#hex').val('#' + hex);
        $("#hex").change();

    });

    // http://www.javascripter.net/faq/rgbtohex.htm
    function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}

    function toHex(n) {
        n = parseInt(n,10);
        if (isNaN(n)) return "00";
        n = Math.max(0,Math.min(n,255));
        return "0123456789ABCDEF".charAt((n-n%16)/16)  + "0123456789ABCDEF".charAt(n%16);
    }

    /**
     * Input: HSL in ranges 0-1.
     * Output: HSL in format Deg, Perc, Perc.
     *
     * Note: rgbToHsl calls this function by default.
     *
     * Multiplies $h by 60, and $s and $l by 100.
     */
    function hslToDegPercPerc(h, s, l) {
        //convert h to degrees
        h *= 60;

        if (h < 0) {
            h += 360;
        }

        //convert s and l to percentage
        //s *= 100;
        //l *= 100;

        hsl['h'] = h;
        hsl['s'] = s;
        hsl['l'] = l;
        return [h,s,l];
    }

    function rgbToHsl(r, g, b){
        console.log(r, g, b);
        r /= 255, g /= 255, b /= 255;
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var h, s, l = (max + min) / 2;
        console.log(max, min);

        if(max == min){
            h = s = 0; // achromatic
        }else{
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch(max){
                //case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case r: h = (g - b) / d; break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            //h /= 6;
        }

        return hslToDegPercPerc(h.toFixed([1]), s.toFixed([2]), l.toFixed([2]));
    }


    function hslToRgb(h, s, l){
        var r, g, b;

        if(s == 0){
            r = g = b = l; // achromatic
        }else{
            function hue2rgb(p, q, t){
                if(t < 0) t += 1;
                if(t > 1) t -= 1;
                if(t < 1/6) return p + (q - p) * 6 * t;
                if(t < 1/2) return q;
                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                return p;
            }

            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1/3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1/3);
        }

        return [r * 255, g * 255, b * 255];
    }



    function reportCol(myval) {

        $.ajax({
            url: '/checkf',
            type: 'GET',
            data: {
                color: myval,
                hits: '20'
            },
            error: function() {
                console.log("erorr");
                $('#info').html('<p>An error has occurred</p>');
            },
            dataType: 'json',
            success: function(data) {
                var aLength = data.terms.color_text.length;
                $("#hexcount").show();
                $("#hexcountlabel").show();
                aLength ? $("#hexcount").val(data.terms.color_text.join()) : $("#hexcount").val("No artworks. Try another color");

                data.terms.color_text.forEach(function(val) {
                    console.log(val);
                });

            },
            type: 'GET'
        });
    };
</script>

</body>
</html>

